//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: fulfillment/v1/clusters_service.proto

//go:build !protoopaque

package fulfillmentv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClustersListRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Index of the first result. If not specified the default value will be zero.
	Offset *int32 `protobuf:"varint,1,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	// Maximum number of results to be returned by the server. When not specified all the results will be returned. Note
	// that there may not be enough results to return, and that the server may decide, for performance reasons, to return
	// less results than requested.
	Limit *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Filter criteria.
	//
	// The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names
	// of the attributes of the cluster instead of the names of the columns of a table. For example, in order to retrieve
	// all the cluster with a API URL starting with `http:` the value should be:
	//
	//	api_url like 'http:%'
	//
	// If this isn't provided, or if the value is empty, then all the clusters that the user has permission to see will be
	// returned.
	Filter *string `protobuf:"bytes,3,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Order criteria.
	//
	// The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the
	// names of the attributes of the cluster instead of the names of the columns of a table. For example, in order to
	// sort the clusters descending by API URL the value should be:
	//
	//	api_url desc
	//
	// If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.
	Order         *string `protobuf:"bytes,4,opt,name=order,proto3,oneof" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersListRequest) Reset() {
	*x = ClustersListRequest{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersListRequest) ProtoMessage() {}

func (x *ClustersListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersListRequest) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ClustersListRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ClustersListRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ClustersListRequest) GetOrder() string {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ""
}

func (x *ClustersListRequest) SetOffset(v int32) {
	x.Offset = &v
}

func (x *ClustersListRequest) SetLimit(v int32) {
	x.Limit = &v
}

func (x *ClustersListRequest) SetFilter(v string) {
	x.Filter = &v
}

func (x *ClustersListRequest) SetOrder(v string) {
	x.Order = &v
}

func (x *ClustersListRequest) HasOffset() bool {
	if x == nil {
		return false
	}
	return x.Offset != nil
}

func (x *ClustersListRequest) HasLimit() bool {
	if x == nil {
		return false
	}
	return x.Limit != nil
}

func (x *ClustersListRequest) HasFilter() bool {
	if x == nil {
		return false
	}
	return x.Filter != nil
}

func (x *ClustersListRequest) HasOrder() bool {
	if x == nil {
		return false
	}
	return x.Order != nil
}

func (x *ClustersListRequest) ClearOffset() {
	x.Offset = nil
}

func (x *ClustersListRequest) ClearLimit() {
	x.Limit = nil
}

func (x *ClustersListRequest) ClearFilter() {
	x.Filter = nil
}

func (x *ClustersListRequest) ClearOrder() {
	x.Order = nil
}

type ClustersListRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Index of the first result. If not specified the default value will be zero.
	Offset *int32
	// Maximum number of results to be returned by the server. When not specified all the results will be returned. Note
	// that there may not be enough results to return, and that the server may decide, for performance reasons, to return
	// less results than requested.
	Limit *int32
	// Filter criteria.
	//
	// The syntax of this parameter is similar to the syntax of the _where_ clause of a SQL statement, but using the names
	// of the attributes of the cluster instead of the names of the columns of a table. For example, in order to retrieve
	// all the cluster with a API URL starting with `http:` the value should be:
	//
	//	api_url like 'http:%'
	//
	// If this isn't provided, or if the value is empty, then all the clusters that the user has permission to see will be
	// returned.
	Filter *string
	// Order criteria.
	//
	// The syntax of this parameter is similar to the syntax of the _order by_ clause of a SQL statement, but using the
	// names of the attributes of the cluster instead of the names of the columns of a table. For example, in order to
	// sort the clusters descending by API URL the value should be:
	//
	//	api_url desc
	//
	// If the parameter isn't provided, or if the value is empty, then the order of the results is undefined.
	Order *string
}

func (b0 ClustersListRequest_builder) Build() *ClustersListRequest {
	m0 := &ClustersListRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Offset = b.Offset
	x.Limit = b.Limit
	x.Filter = b.Filter
	x.Order = b.Order
	return m0
}

type ClustersListResponse struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Actual number of items returned. Note that this may be smaller than the value requested in the `limit` parameter
	// of the request if there are not enough items, or of the system decides that returning that number of items isn't
	// feasible or convenient for performance reasons.
	Size *int32 `protobuf:"varint,1,opt,name=size,proto3,oneof" json:"size,omitempty"`
	// Total number of items of the collection that match the search criteria, regardless of the number of results
	// requested with the `limit` parameter.
	Total *int32 `protobuf:"varint,2,opt,name=total,proto3,oneof" json:"total,omitempty"`
	// List of results.
	Items         []*Cluster `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersListResponse) Reset() {
	*x = ClustersListResponse{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersListResponse) ProtoMessage() {}

func (x *ClustersListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersListResponse) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *ClustersListResponse) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *ClustersListResponse) GetItems() []*Cluster {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ClustersListResponse) SetSize(v int32) {
	x.Size = &v
}

func (x *ClustersListResponse) SetTotal(v int32) {
	x.Total = &v
}

func (x *ClustersListResponse) SetItems(v []*Cluster) {
	x.Items = v
}

func (x *ClustersListResponse) HasSize() bool {
	if x == nil {
		return false
	}
	return x.Size != nil
}

func (x *ClustersListResponse) HasTotal() bool {
	if x == nil {
		return false
	}
	return x.Total != nil
}

func (x *ClustersListResponse) ClearSize() {
	x.Size = nil
}

func (x *ClustersListResponse) ClearTotal() {
	x.Total = nil
}

type ClustersListResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Actual number of items returned. Note that this may be smaller than the value requested in the `limit` parameter
	// of the request if there are not enough items, or of the system decides that returning that number of items isn't
	// feasible or convenient for performance reasons.
	Size *int32
	// Total number of items of the collection that match the search criteria, regardless of the number of results
	// requested with the `limit` parameter.
	Total *int32
	// List of results.
	Items []*Cluster
}

func (b0 ClustersListResponse_builder) Build() *ClustersListResponse {
	m0 := &ClustersListResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Size = b.Size
	x.Total = b.Total
	x.Items = b.Items
	return m0
}

type ClustersGetRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersGetRequest) Reset() {
	*x = ClustersGetRequest{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersGetRequest) ProtoMessage() {}

func (x *ClustersGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClustersGetRequest) SetId(v string) {
	x.Id = v
}

type ClustersGetRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id string
}

func (b0 ClustersGetRequest_builder) Build() *ClustersGetRequest {
	m0 := &ClustersGetRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	return m0
}

type ClustersGetResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Object        *Cluster               `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersGetResponse) Reset() {
	*x = ClustersGetResponse{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersGetResponse) ProtoMessage() {}

func (x *ClustersGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersGetResponse) GetObject() *Cluster {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *ClustersGetResponse) SetObject(v *Cluster) {
	x.Object = v
}

func (x *ClustersGetResponse) HasObject() bool {
	if x == nil {
		return false
	}
	return x.Object != nil
}

func (x *ClustersGetResponse) ClearObject() {
	x.Object = nil
}

type ClustersGetResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Object *Cluster
}

func (b0 ClustersGetResponse_builder) Build() *ClustersGetResponse {
	m0 := &ClustersGetResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Object = b.Object
	return m0
}

type ClustersGetKubeconfigRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersGetKubeconfigRequest) Reset() {
	*x = ClustersGetKubeconfigRequest{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersGetKubeconfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersGetKubeconfigRequest) ProtoMessage() {}

func (x *ClustersGetKubeconfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersGetKubeconfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClustersGetKubeconfigRequest) SetId(v string) {
	x.Id = v
}

type ClustersGetKubeconfigRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id string
}

func (b0 ClustersGetKubeconfigRequest_builder) Build() *ClustersGetKubeconfigRequest {
	m0 := &ClustersGetKubeconfigRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	return m0
}

type ClustersGetKubeconfigResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Kubeconfig    string                 `protobuf:"bytes,1,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersGetKubeconfigResponse) Reset() {
	*x = ClustersGetKubeconfigResponse{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersGetKubeconfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersGetKubeconfigResponse) ProtoMessage() {}

func (x *ClustersGetKubeconfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersGetKubeconfigResponse) GetKubeconfig() string {
	if x != nil {
		return x.Kubeconfig
	}
	return ""
}

func (x *ClustersGetKubeconfigResponse) SetKubeconfig(v string) {
	x.Kubeconfig = v
}

type ClustersGetKubeconfigResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Kubeconfig string
}

func (b0 ClustersGetKubeconfigResponse_builder) Build() *ClustersGetKubeconfigResponse {
	m0 := &ClustersGetKubeconfigResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Kubeconfig = b.Kubeconfig
	return m0
}

type ClustersGetKubeconfigViaHttpRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersGetKubeconfigViaHttpRequest) Reset() {
	*x = ClustersGetKubeconfigViaHttpRequest{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersGetKubeconfigViaHttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersGetKubeconfigViaHttpRequest) ProtoMessage() {}

func (x *ClustersGetKubeconfigViaHttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersGetKubeconfigViaHttpRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClustersGetKubeconfigViaHttpRequest) SetId(v string) {
	x.Id = v
}

type ClustersGetKubeconfigViaHttpRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id string
}

func (b0 ClustersGetKubeconfigViaHttpRequest_builder) Build() *ClustersGetKubeconfigViaHttpRequest {
	m0 := &ClustersGetKubeconfigViaHttpRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	return m0
}

type ClustersGetPasswordRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersGetPasswordRequest) Reset() {
	*x = ClustersGetPasswordRequest{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersGetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersGetPasswordRequest) ProtoMessage() {}

func (x *ClustersGetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersGetPasswordRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClustersGetPasswordRequest) SetId(v string) {
	x.Id = v
}

type ClustersGetPasswordRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id string
}

func (b0 ClustersGetPasswordRequest_builder) Build() *ClustersGetPasswordRequest {
	m0 := &ClustersGetPasswordRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	return m0
}

type ClustersGetPasswordResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Password      string                 `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersGetPasswordResponse) Reset() {
	*x = ClustersGetPasswordResponse{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersGetPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersGetPasswordResponse) ProtoMessage() {}

func (x *ClustersGetPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersGetPasswordResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClustersGetPasswordResponse) SetPassword(v string) {
	x.Password = v
}

type ClustersGetPasswordResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Password string
}

func (b0 ClustersGetPasswordResponse_builder) Build() *ClustersGetPasswordResponse {
	m0 := &ClustersGetPasswordResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Password = b.Password
	return m0
}

type ClustersGetPasswordViaHttpRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersGetPasswordViaHttpRequest) Reset() {
	*x = ClustersGetPasswordViaHttpRequest{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersGetPasswordViaHttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersGetPasswordViaHttpRequest) ProtoMessage() {}

func (x *ClustersGetPasswordViaHttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersGetPasswordViaHttpRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClustersGetPasswordViaHttpRequest) SetId(v string) {
	x.Id = v
}

type ClustersGetPasswordViaHttpRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id string
}

func (b0 ClustersGetPasswordViaHttpRequest_builder) Build() *ClustersGetPasswordViaHttpRequest {
	m0 := &ClustersGetPasswordViaHttpRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	return m0
}

type ClustersCreateRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Object        *Cluster               `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersCreateRequest) Reset() {
	*x = ClustersCreateRequest{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersCreateRequest) ProtoMessage() {}

func (x *ClustersCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersCreateRequest) GetObject() *Cluster {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *ClustersCreateRequest) SetObject(v *Cluster) {
	x.Object = v
}

func (x *ClustersCreateRequest) HasObject() bool {
	if x == nil {
		return false
	}
	return x.Object != nil
}

func (x *ClustersCreateRequest) ClearObject() {
	x.Object = nil
}

type ClustersCreateRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Object *Cluster
}

func (b0 ClustersCreateRequest_builder) Build() *ClustersCreateRequest {
	m0 := &ClustersCreateRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Object = b.Object
	return m0
}

type ClustersCreateResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Object        *Cluster               `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersCreateResponse) Reset() {
	*x = ClustersCreateResponse{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersCreateResponse) ProtoMessage() {}

func (x *ClustersCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersCreateResponse) GetObject() *Cluster {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *ClustersCreateResponse) SetObject(v *Cluster) {
	x.Object = v
}

func (x *ClustersCreateResponse) HasObject() bool {
	if x == nil {
		return false
	}
	return x.Object != nil
}

func (x *ClustersCreateResponse) ClearObject() {
	x.Object = nil
}

type ClustersCreateResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Object *Cluster
}

func (b0 ClustersCreateResponse_builder) Build() *ClustersCreateResponse {
	m0 := &ClustersCreateResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Object = b.Object
	return m0
}

type ClustersUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Object        *Cluster               `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersUpdateRequest) Reset() {
	*x = ClustersUpdateRequest{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersUpdateRequest) ProtoMessage() {}

func (x *ClustersUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersUpdateRequest) GetObject() *Cluster {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *ClustersUpdateRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *ClustersUpdateRequest) SetObject(v *Cluster) {
	x.Object = v
}

func (x *ClustersUpdateRequest) SetUpdateMask(v *fieldmaskpb.FieldMask) {
	x.UpdateMask = v
}

func (x *ClustersUpdateRequest) HasObject() bool {
	if x == nil {
		return false
	}
	return x.Object != nil
}

func (x *ClustersUpdateRequest) HasUpdateMask() bool {
	if x == nil {
		return false
	}
	return x.UpdateMask != nil
}

func (x *ClustersUpdateRequest) ClearObject() {
	x.Object = nil
}

func (x *ClustersUpdateRequest) ClearUpdateMask() {
	x.UpdateMask = nil
}

type ClustersUpdateRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Object     *Cluster
	UpdateMask *fieldmaskpb.FieldMask
}

func (b0 ClustersUpdateRequest_builder) Build() *ClustersUpdateRequest {
	m0 := &ClustersUpdateRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Object = b.Object
	x.UpdateMask = b.UpdateMask
	return m0
}

type ClustersUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Object        *Cluster               `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersUpdateResponse) Reset() {
	*x = ClustersUpdateResponse{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersUpdateResponse) ProtoMessage() {}

func (x *ClustersUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersUpdateResponse) GetObject() *Cluster {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *ClustersUpdateResponse) SetObject(v *Cluster) {
	x.Object = v
}

func (x *ClustersUpdateResponse) HasObject() bool {
	if x == nil {
		return false
	}
	return x.Object != nil
}

func (x *ClustersUpdateResponse) ClearObject() {
	x.Object = nil
}

type ClustersUpdateResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Object *Cluster
}

func (b0 ClustersUpdateResponse_builder) Build() *ClustersUpdateResponse {
	m0 := &ClustersUpdateResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Object = b.Object
	return m0
}

type ClustersDeleteRequest struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersDeleteRequest) Reset() {
	*x = ClustersDeleteRequest{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersDeleteRequest) ProtoMessage() {}

func (x *ClustersDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClustersDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClustersDeleteRequest) SetId(v string) {
	x.Id = v
}

type ClustersDeleteRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id string
}

func (b0 ClustersDeleteRequest_builder) Build() *ClustersDeleteRequest {
	m0 := &ClustersDeleteRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	return m0
}

type ClustersDeleteResponse struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClustersDeleteResponse) Reset() {
	*x = ClustersDeleteResponse{}
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClustersDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClustersDeleteResponse) ProtoMessage() {}

func (x *ClustersDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_clusters_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ClustersDeleteResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ClustersDeleteResponse_builder) Build() *ClustersDeleteResponse {
	m0 := &ClustersDeleteResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

var File_fulfillment_v1_clusters_service_proto protoreflect.FileDescriptor

var file_fulfillment_v1_clusters_service_proto_rawDesc = string([]byte{
	0x0a, 0x25, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x13,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x1d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x35, 0x0a, 0x23, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x69,
	0x61, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x1a,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x1b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x33, 0x0a, 0x21, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x61, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x15, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x49, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x85, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x49, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x27, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc0, 0x09, 0x0a, 0x08, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x77, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x66, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x62, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x6e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2c, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x97, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x56, 0x69, 0x61, 0x48, 0x74, 0x74, 0x70, 0x12, 0x33, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x69, 0x61, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42,
	0x6f, 0x64, 0x79, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x56, 0x69, 0x61, 0x48, 0x74, 0x74, 0x70, 0x12, 0x31, 0x2e, 0x66, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x56,
	0x69, 0x61, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42,
	0x6f, 0x64, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x62, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x62, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x69, 0x64, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25,
	0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0xd3, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42,
	0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x6e, 0x61, 0x62, 0x6f, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x6b, 0x69, 0x74, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x58, 0x58, 0xaa, 0x02, 0x0e,
	0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x0e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1a, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x46,
	0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var file_fulfillment_v1_clusters_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_fulfillment_v1_clusters_service_proto_goTypes = []any{
	(*ClustersListRequest)(nil),                 // 0: fulfillment.v1.ClustersListRequest
	(*ClustersListResponse)(nil),                // 1: fulfillment.v1.ClustersListResponse
	(*ClustersGetRequest)(nil),                  // 2: fulfillment.v1.ClustersGetRequest
	(*ClustersGetResponse)(nil),                 // 3: fulfillment.v1.ClustersGetResponse
	(*ClustersGetKubeconfigRequest)(nil),        // 4: fulfillment.v1.ClustersGetKubeconfigRequest
	(*ClustersGetKubeconfigResponse)(nil),       // 5: fulfillment.v1.ClustersGetKubeconfigResponse
	(*ClustersGetKubeconfigViaHttpRequest)(nil), // 6: fulfillment.v1.ClustersGetKubeconfigViaHttpRequest
	(*ClustersGetPasswordRequest)(nil),          // 7: fulfillment.v1.ClustersGetPasswordRequest
	(*ClustersGetPasswordResponse)(nil),         // 8: fulfillment.v1.ClustersGetPasswordResponse
	(*ClustersGetPasswordViaHttpRequest)(nil),   // 9: fulfillment.v1.ClustersGetPasswordViaHttpRequest
	(*ClustersCreateRequest)(nil),               // 10: fulfillment.v1.ClustersCreateRequest
	(*ClustersCreateResponse)(nil),              // 11: fulfillment.v1.ClustersCreateResponse
	(*ClustersUpdateRequest)(nil),               // 12: fulfillment.v1.ClustersUpdateRequest
	(*ClustersUpdateResponse)(nil),              // 13: fulfillment.v1.ClustersUpdateResponse
	(*ClustersDeleteRequest)(nil),               // 14: fulfillment.v1.ClustersDeleteRequest
	(*ClustersDeleteResponse)(nil),              // 15: fulfillment.v1.ClustersDeleteResponse
	(*Cluster)(nil),                             // 16: fulfillment.v1.Cluster
	(*fieldmaskpb.FieldMask)(nil),               // 17: google.protobuf.FieldMask
	(*httpbody.HttpBody)(nil),                   // 18: google.api.HttpBody
}
var file_fulfillment_v1_clusters_service_proto_depIdxs = []int32{
	16, // 0: fulfillment.v1.ClustersListResponse.items:type_name -> fulfillment.v1.Cluster
	16, // 1: fulfillment.v1.ClustersGetResponse.object:type_name -> fulfillment.v1.Cluster
	16, // 2: fulfillment.v1.ClustersCreateRequest.object:type_name -> fulfillment.v1.Cluster
	16, // 3: fulfillment.v1.ClustersCreateResponse.object:type_name -> fulfillment.v1.Cluster
	16, // 4: fulfillment.v1.ClustersUpdateRequest.object:type_name -> fulfillment.v1.Cluster
	17, // 5: fulfillment.v1.ClustersUpdateRequest.update_mask:type_name -> google.protobuf.FieldMask
	16, // 6: fulfillment.v1.ClustersUpdateResponse.object:type_name -> fulfillment.v1.Cluster
	0,  // 7: fulfillment.v1.Clusters.List:input_type -> fulfillment.v1.ClustersListRequest
	2,  // 8: fulfillment.v1.Clusters.Get:input_type -> fulfillment.v1.ClustersGetRequest
	4,  // 9: fulfillment.v1.Clusters.GetKubeconfig:input_type -> fulfillment.v1.ClustersGetKubeconfigRequest
	6,  // 10: fulfillment.v1.Clusters.GetKubeconfigViaHttp:input_type -> fulfillment.v1.ClustersGetKubeconfigViaHttpRequest
	7,  // 11: fulfillment.v1.Clusters.GetPassword:input_type -> fulfillment.v1.ClustersGetPasswordRequest
	9,  // 12: fulfillment.v1.Clusters.GetPasswordViaHttp:input_type -> fulfillment.v1.ClustersGetPasswordViaHttpRequest
	10, // 13: fulfillment.v1.Clusters.Create:input_type -> fulfillment.v1.ClustersCreateRequest
	12, // 14: fulfillment.v1.Clusters.Update:input_type -> fulfillment.v1.ClustersUpdateRequest
	14, // 15: fulfillment.v1.Clusters.Delete:input_type -> fulfillment.v1.ClustersDeleteRequest
	1,  // 16: fulfillment.v1.Clusters.List:output_type -> fulfillment.v1.ClustersListResponse
	3,  // 17: fulfillment.v1.Clusters.Get:output_type -> fulfillment.v1.ClustersGetResponse
	5,  // 18: fulfillment.v1.Clusters.GetKubeconfig:output_type -> fulfillment.v1.ClustersGetKubeconfigResponse
	18, // 19: fulfillment.v1.Clusters.GetKubeconfigViaHttp:output_type -> google.api.HttpBody
	8,  // 20: fulfillment.v1.Clusters.GetPassword:output_type -> fulfillment.v1.ClustersGetPasswordResponse
	18, // 21: fulfillment.v1.Clusters.GetPasswordViaHttp:output_type -> google.api.HttpBody
	11, // 22: fulfillment.v1.Clusters.Create:output_type -> fulfillment.v1.ClustersCreateResponse
	13, // 23: fulfillment.v1.Clusters.Update:output_type -> fulfillment.v1.ClustersUpdateResponse
	15, // 24: fulfillment.v1.Clusters.Delete:output_type -> fulfillment.v1.ClustersDeleteResponse
	16, // [16:25] is the sub-list for method output_type
	7,  // [7:16] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_fulfillment_v1_clusters_service_proto_init() }
func file_fulfillment_v1_clusters_service_proto_init() {
	if File_fulfillment_v1_clusters_service_proto != nil {
		return
	}
	file_fulfillment_v1_cluster_type_proto_init()
	file_fulfillment_v1_clusters_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_fulfillment_v1_clusters_service_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fulfillment_v1_clusters_service_proto_rawDesc), len(file_fulfillment_v1_clusters_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fulfillment_v1_clusters_service_proto_goTypes,
		DependencyIndexes: file_fulfillment_v1_clusters_service_proto_depIdxs,
		MessageInfos:      file_fulfillment_v1_clusters_service_proto_msgTypes,
	}.Build()
	File_fulfillment_v1_clusters_service_proto = out.File
	file_fulfillment_v1_clusters_service_proto_goTypes = nil
	file_fulfillment_v1_clusters_service_proto_depIdxs = nil
}
