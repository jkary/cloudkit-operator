//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: fulfillment/v1/virtual_machine_templates_service.proto

package fulfillmentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VirtualMachineTemplates_List_FullMethodName   = "/fulfillment.v1.VirtualMachineTemplates/List"
	VirtualMachineTemplates_Get_FullMethodName    = "/fulfillment.v1.VirtualMachineTemplates/Get"
	VirtualMachineTemplates_Create_FullMethodName = "/fulfillment.v1.VirtualMachineTemplates/Create"
	VirtualMachineTemplates_Update_FullMethodName = "/fulfillment.v1.VirtualMachineTemplates/Update"
	VirtualMachineTemplates_Delete_FullMethodName = "/fulfillment.v1.VirtualMachineTemplates/Delete"
)

// VirtualMachineTemplatesClient is the client API for VirtualMachineTemplates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualMachineTemplatesClient interface {
	// Retrieves the list of virtual machine templates.
	List(ctx context.Context, in *VirtualMachineTemplatesListRequest, opts ...grpc.CallOption) (*VirtualMachineTemplatesListResponse, error)
	// Retrieves the details of one specific virtual machine template.
	Get(ctx context.Context, in *VirtualMachineTemplatesGetRequest, opts ...grpc.CallOption) (*VirtualMachineTemplatesGetResponse, error)
	// Creates a new virtual machine template.
	Create(ctx context.Context, in *VirtualMachineTemplatesCreateRequest, opts ...grpc.CallOption) (*VirtualMachineTemplatesCreateResponse, error)
	// Updates an existing virtual machine template.
	Update(ctx context.Context, in *VirtualMachineTemplatesUpdateRequest, opts ...grpc.CallOption) (*VirtualMachineTemplatesUpdateResponse, error)
	// Delete a virtual machine template.
	Delete(ctx context.Context, in *VirtualMachineTemplatesDeleteRequest, opts ...grpc.CallOption) (*VirtualMachineTemplatesDeleteResponse, error)
}

type virtualMachineTemplatesClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualMachineTemplatesClient(cc grpc.ClientConnInterface) VirtualMachineTemplatesClient {
	return &virtualMachineTemplatesClient{cc}
}

func (c *virtualMachineTemplatesClient) List(ctx context.Context, in *VirtualMachineTemplatesListRequest, opts ...grpc.CallOption) (*VirtualMachineTemplatesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachineTemplatesListResponse)
	err := c.cc.Invoke(ctx, VirtualMachineTemplates_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineTemplatesClient) Get(ctx context.Context, in *VirtualMachineTemplatesGetRequest, opts ...grpc.CallOption) (*VirtualMachineTemplatesGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachineTemplatesGetResponse)
	err := c.cc.Invoke(ctx, VirtualMachineTemplates_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineTemplatesClient) Create(ctx context.Context, in *VirtualMachineTemplatesCreateRequest, opts ...grpc.CallOption) (*VirtualMachineTemplatesCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachineTemplatesCreateResponse)
	err := c.cc.Invoke(ctx, VirtualMachineTemplates_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineTemplatesClient) Update(ctx context.Context, in *VirtualMachineTemplatesUpdateRequest, opts ...grpc.CallOption) (*VirtualMachineTemplatesUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachineTemplatesUpdateResponse)
	err := c.cc.Invoke(ctx, VirtualMachineTemplates_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachineTemplatesClient) Delete(ctx context.Context, in *VirtualMachineTemplatesDeleteRequest, opts ...grpc.CallOption) (*VirtualMachineTemplatesDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachineTemplatesDeleteResponse)
	err := c.cc.Invoke(ctx, VirtualMachineTemplates_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualMachineTemplatesServer is the server API for VirtualMachineTemplates service.
// All implementations must embed UnimplementedVirtualMachineTemplatesServer
// for forward compatibility.
type VirtualMachineTemplatesServer interface {
	// Retrieves the list of virtual machine templates.
	List(context.Context, *VirtualMachineTemplatesListRequest) (*VirtualMachineTemplatesListResponse, error)
	// Retrieves the details of one specific virtual machine template.
	Get(context.Context, *VirtualMachineTemplatesGetRequest) (*VirtualMachineTemplatesGetResponse, error)
	// Creates a new virtual machine template.
	Create(context.Context, *VirtualMachineTemplatesCreateRequest) (*VirtualMachineTemplatesCreateResponse, error)
	// Updates an existing virtual machine template.
	Update(context.Context, *VirtualMachineTemplatesUpdateRequest) (*VirtualMachineTemplatesUpdateResponse, error)
	// Delete a virtual machine template.
	Delete(context.Context, *VirtualMachineTemplatesDeleteRequest) (*VirtualMachineTemplatesDeleteResponse, error)
	mustEmbedUnimplementedVirtualMachineTemplatesServer()
}

// UnimplementedVirtualMachineTemplatesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVirtualMachineTemplatesServer struct{}

func (UnimplementedVirtualMachineTemplatesServer) List(context.Context, *VirtualMachineTemplatesListRequest) (*VirtualMachineTemplatesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedVirtualMachineTemplatesServer) Get(context.Context, *VirtualMachineTemplatesGetRequest) (*VirtualMachineTemplatesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVirtualMachineTemplatesServer) Create(context.Context, *VirtualMachineTemplatesCreateRequest) (*VirtualMachineTemplatesCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVirtualMachineTemplatesServer) Update(context.Context, *VirtualMachineTemplatesUpdateRequest) (*VirtualMachineTemplatesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedVirtualMachineTemplatesServer) Delete(context.Context, *VirtualMachineTemplatesDeleteRequest) (*VirtualMachineTemplatesDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVirtualMachineTemplatesServer) mustEmbedUnimplementedVirtualMachineTemplatesServer() {
}
func (UnimplementedVirtualMachineTemplatesServer) testEmbeddedByValue() {}

// UnsafeVirtualMachineTemplatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualMachineTemplatesServer will
// result in compilation errors.
type UnsafeVirtualMachineTemplatesServer interface {
	mustEmbedUnimplementedVirtualMachineTemplatesServer()
}

func RegisterVirtualMachineTemplatesServer(s grpc.ServiceRegistrar, srv VirtualMachineTemplatesServer) {
	// If the following call pancis, it indicates UnimplementedVirtualMachineTemplatesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VirtualMachineTemplates_ServiceDesc, srv)
}

func _VirtualMachineTemplates_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineTemplatesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineTemplatesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachineTemplates_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineTemplatesServer).List(ctx, req.(*VirtualMachineTemplatesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineTemplates_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineTemplatesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineTemplatesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachineTemplates_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineTemplatesServer).Get(ctx, req.(*VirtualMachineTemplatesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineTemplates_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineTemplatesCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineTemplatesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachineTemplates_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineTemplatesServer).Create(ctx, req.(*VirtualMachineTemplatesCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineTemplates_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineTemplatesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineTemplatesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachineTemplates_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineTemplatesServer).Update(ctx, req.(*VirtualMachineTemplatesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachineTemplates_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineTemplatesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachineTemplatesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachineTemplates_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachineTemplatesServer).Delete(ctx, req.(*VirtualMachineTemplatesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualMachineTemplates_ServiceDesc is the grpc.ServiceDesc for VirtualMachineTemplates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualMachineTemplates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fulfillment.v1.VirtualMachineTemplates",
	HandlerType: (*VirtualMachineTemplatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _VirtualMachineTemplates_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _VirtualMachineTemplates_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _VirtualMachineTemplates_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _VirtualMachineTemplates_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VirtualMachineTemplates_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fulfillment/v1/virtual_machine_templates_service.proto",
}
