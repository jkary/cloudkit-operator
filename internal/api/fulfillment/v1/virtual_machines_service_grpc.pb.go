//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: fulfillment/v1/virtual_machines_service.proto

package fulfillmentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VirtualMachines_List_FullMethodName   = "/fulfillment.v1.VirtualMachines/List"
	VirtualMachines_Get_FullMethodName    = "/fulfillment.v1.VirtualMachines/Get"
	VirtualMachines_Create_FullMethodName = "/fulfillment.v1.VirtualMachines/Create"
	VirtualMachines_Update_FullMethodName = "/fulfillment.v1.VirtualMachines/Update"
	VirtualMachines_Delete_FullMethodName = "/fulfillment.v1.VirtualMachines/Delete"
)

// VirtualMachinesClient is the client API for VirtualMachines service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualMachinesClient interface {
	// Retrieves the list of virtual machines.
	List(ctx context.Context, in *VirtualMachinesListRequest, opts ...grpc.CallOption) (*VirtualMachinesListResponse, error)
	// Retrieves the details of one specific virtual machine.
	Get(ctx context.Context, in *VirtualMachinesGetRequest, opts ...grpc.CallOption) (*VirtualMachinesGetResponse, error)
	// Creates a new virtual machine.
	//
	// Note that this operation is not allowed for regular users, only for the server. Regular users create virtual machines
	// indirectly, creating a virtual machine order that will eventually result in the system creating a virtual machine.
	Create(ctx context.Context, in *VirtualMachinesCreateRequest, opts ...grpc.CallOption) (*VirtualMachinesCreateResponse, error)
	// Updates an existing virtual machine.
	//
	// In the HTTP+JSON version of the API this is mapped to the `PATCH` verb and the `update_mask` field is automatically
	// populated from the list of fields present in the request body. For example, to update the `state` of a virtual machine to
	// `READY` the request line should be like this:
	//
	// ```http
	// PATCH /api/fulfillment/v1/virtual_machines/123
	// ```
	//
	// And the request body should be like this:
	//
	// ```json
	//
	//	{
	//	  "status": {
	//	    "state": "VIRTUAL_MACHINE_STATE_READY"
	//	  }
	//	}
	//
	// ```
	//
	// The response body will contain the modified object.
	Update(ctx context.Context, in *VirtualMachinesUpdateRequest, opts ...grpc.CallOption) (*VirtualMachinesUpdateResponse, error)
	// Delete a virtual machine.
	Delete(ctx context.Context, in *VirtualMachinesDeleteRequest, opts ...grpc.CallOption) (*VirtualMachinesDeleteResponse, error)
}

type virtualMachinesClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualMachinesClient(cc grpc.ClientConnInterface) VirtualMachinesClient {
	return &virtualMachinesClient{cc}
}

func (c *virtualMachinesClient) List(ctx context.Context, in *VirtualMachinesListRequest, opts ...grpc.CallOption) (*VirtualMachinesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachinesListResponse)
	err := c.cc.Invoke(ctx, VirtualMachines_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachinesClient) Get(ctx context.Context, in *VirtualMachinesGetRequest, opts ...grpc.CallOption) (*VirtualMachinesGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachinesGetResponse)
	err := c.cc.Invoke(ctx, VirtualMachines_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachinesClient) Create(ctx context.Context, in *VirtualMachinesCreateRequest, opts ...grpc.CallOption) (*VirtualMachinesCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachinesCreateResponse)
	err := c.cc.Invoke(ctx, VirtualMachines_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachinesClient) Update(ctx context.Context, in *VirtualMachinesUpdateRequest, opts ...grpc.CallOption) (*VirtualMachinesUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachinesUpdateResponse)
	err := c.cc.Invoke(ctx, VirtualMachines_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualMachinesClient) Delete(ctx context.Context, in *VirtualMachinesDeleteRequest, opts ...grpc.CallOption) (*VirtualMachinesDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachinesDeleteResponse)
	err := c.cc.Invoke(ctx, VirtualMachines_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualMachinesServer is the server API for VirtualMachines service.
// All implementations must embed UnimplementedVirtualMachinesServer
// for forward compatibility.
type VirtualMachinesServer interface {
	// Retrieves the list of virtual machines.
	List(context.Context, *VirtualMachinesListRequest) (*VirtualMachinesListResponse, error)
	// Retrieves the details of one specific virtual machine.
	Get(context.Context, *VirtualMachinesGetRequest) (*VirtualMachinesGetResponse, error)
	// Creates a new virtual machine.
	//
	// Note that this operation is not allowed for regular users, only for the server. Regular users create virtual machines
	// indirectly, creating a virtual machine order that will eventually result in the system creating a virtual machine.
	Create(context.Context, *VirtualMachinesCreateRequest) (*VirtualMachinesCreateResponse, error)
	// Updates an existing virtual machine.
	//
	// In the HTTP+JSON version of the API this is mapped to the `PATCH` verb and the `update_mask` field is automatically
	// populated from the list of fields present in the request body. For example, to update the `state` of a virtual machine to
	// `READY` the request line should be like this:
	//
	// ```http
	// PATCH /api/fulfillment/v1/virtual_machines/123
	// ```
	//
	// And the request body should be like this:
	//
	// ```json
	//
	//	{
	//	  "status": {
	//	    "state": "VIRTUAL_MACHINE_STATE_READY"
	//	  }
	//	}
	//
	// ```
	//
	// The response body will contain the modified object.
	Update(context.Context, *VirtualMachinesUpdateRequest) (*VirtualMachinesUpdateResponse, error)
	// Delete a virtual machine.
	Delete(context.Context, *VirtualMachinesDeleteRequest) (*VirtualMachinesDeleteResponse, error)
	mustEmbedUnimplementedVirtualMachinesServer()
}

// UnimplementedVirtualMachinesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVirtualMachinesServer struct{}

func (UnimplementedVirtualMachinesServer) List(context.Context, *VirtualMachinesListRequest) (*VirtualMachinesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedVirtualMachinesServer) Get(context.Context, *VirtualMachinesGetRequest) (*VirtualMachinesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVirtualMachinesServer) Create(context.Context, *VirtualMachinesCreateRequest) (*VirtualMachinesCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVirtualMachinesServer) Update(context.Context, *VirtualMachinesUpdateRequest) (*VirtualMachinesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedVirtualMachinesServer) Delete(context.Context, *VirtualMachinesDeleteRequest) (*VirtualMachinesDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVirtualMachinesServer) mustEmbedUnimplementedVirtualMachinesServer() {}
func (UnimplementedVirtualMachinesServer) testEmbeddedByValue()                         {}

// UnsafeVirtualMachinesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualMachinesServer will
// result in compilation errors.
type UnsafeVirtualMachinesServer interface {
	mustEmbedUnimplementedVirtualMachinesServer()
}

func RegisterVirtualMachinesServer(s grpc.ServiceRegistrar, srv VirtualMachinesServer) {
	// If the following call pancis, it indicates UnimplementedVirtualMachinesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VirtualMachines_ServiceDesc, srv)
}

func _VirtualMachines_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachinesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachinesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachines_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachinesServer).List(ctx, req.(*VirtualMachinesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachines_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachinesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachinesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachines_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachinesServer).Get(ctx, req.(*VirtualMachinesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachines_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachinesCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachinesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachines_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachinesServer).Create(ctx, req.(*VirtualMachinesCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachines_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachinesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachinesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachines_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachinesServer).Update(ctx, req.(*VirtualMachinesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualMachines_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachinesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualMachinesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualMachines_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualMachinesServer).Delete(ctx, req.(*VirtualMachinesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualMachines_ServiceDesc is the grpc.ServiceDesc for VirtualMachines service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualMachines_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fulfillment.v1.VirtualMachines",
	HandlerType: (*VirtualMachinesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _VirtualMachines_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _VirtualMachines_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _VirtualMachines_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _VirtualMachines_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VirtualMachines_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fulfillment/v1/virtual_machines_service.proto",
}
