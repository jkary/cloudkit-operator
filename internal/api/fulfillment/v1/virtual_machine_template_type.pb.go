//
// Copyright (c) 2025 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: fulfillment/v1/virtual_machine_template_type.proto

//go:build !protoopaque

package fulfillmentv1

import (
	v1 "github.com/innabox/cloudkit-operator/internal/api/shared/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A virtual machine template defines a type of virtual machine that can be created by the user. Note that the user doesn't create these
// templates: the system provides a collection of them, and the user chooses one.
type VirtualMachineTemplate struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Unique identifier of the template.
	Id       string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *v1.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Human friendly short description of the template, only a few words, suitable for displaying in one single line on a
	// UI or CLI.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Human friendly long description of the template, using Markdown format.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Definitions of the parameters that can be used to customize the template.
	//
	// Note that these are only the *definitions* of the parameters, not the actual values. The actual values are in the
	// `spec.template_parameters` field of the virtual machine.
	Parameters    []*VirtualMachineTemplateParameterDefinition `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VirtualMachineTemplate) Reset() {
	*x = VirtualMachineTemplate{}
	mi := &file_fulfillment_v1_virtual_machine_template_type_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualMachineTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineTemplate) ProtoMessage() {}

func (x *VirtualMachineTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_virtual_machine_template_type_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *VirtualMachineTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualMachineTemplate) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VirtualMachineTemplate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VirtualMachineTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VirtualMachineTemplate) GetParameters() []*VirtualMachineTemplateParameterDefinition {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *VirtualMachineTemplate) SetId(v string) {
	x.Id = v
}

func (x *VirtualMachineTemplate) SetMetadata(v *v1.Metadata) {
	x.Metadata = v
}

func (x *VirtualMachineTemplate) SetTitle(v string) {
	x.Title = v
}

func (x *VirtualMachineTemplate) SetDescription(v string) {
	x.Description = v
}

func (x *VirtualMachineTemplate) SetParameters(v []*VirtualMachineTemplateParameterDefinition) {
	x.Parameters = v
}

func (x *VirtualMachineTemplate) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.Metadata != nil
}

func (x *VirtualMachineTemplate) ClearMetadata() {
	x.Metadata = nil
}

type VirtualMachineTemplate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique identifier of the template.
	Id       string
	Metadata *v1.Metadata
	// Human friendly short description of the template, only a few words, suitable for displaying in one single line on a
	// UI or CLI.
	Title string
	// Human friendly long description of the template, using Markdown format.
	Description string
	// Definitions of the parameters that can be used to customize the template.
	//
	// Note that these are only the *definitions* of the parameters, not the actual values. The actual values are in the
	// `spec.template_parameters` field of the virtual machine.
	Parameters []*VirtualMachineTemplateParameterDefinition
}

func (b0 VirtualMachineTemplate_builder) Build() *VirtualMachineTemplate {
	m0 := &VirtualMachineTemplate{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Metadata = b.Metadata
	x.Title = b.Title
	x.Description = b.Description
	x.Parameters = b.Parameters
	return m0
}

// Contains type and documentation of a template parameter.
type VirtualMachineTemplateParameterDefinition struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Name of the parameter.
	//
	// This is the name that should be used in the `template_parameters` field of the virtual machine to assign a value to the
	// parameter.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Human friendly short description of the parameter, only a few words, suitable for displaying in one single line on
	// a UI or CLI.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Human friendly description of the parameter, using Markdown format.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Indicates if this parameter is required or optional.
	//
	// Values for required parameters must be included when creating the virtual machine, otherwise it will be rejected.
	//
	// Note that there may be other dependencies between parameters which may cause a virtual machine to be rejected. For example,
	// the allowed values of a parameter may depend on the value of another parameter. That kind of information will be in
	// the `description` field.
	Required bool `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	// Type of the parameter.
	//
	// The possible values are the same as those used by the `type_url` field of the `Any` type:
	//
	// | Type                           | Value                                             |
	// |--------------------------------|---------------------------------------------------|
	// | Boolean                        | `type.googleapis.com/google.protobuf.BoolValue`   |
	// | Integer number, 32 bits        | `type.googleapis.com/google.protobuf.Int32Value`  |
	// | Integer number, 64 bits        | `type.googleapis.com/google.protobuf.Int64Value`  |
	// | Floating point number, 32 bits | `type.googleapis.com/google.protobuf.FloatValue`  |
	// | Floating point number, 64 bits | `type.googleapis.com/google.protobuf.DoubleValue` |
	// | String                         | `type.googleapis.com/google.protobuf.StringValue` |
	// | Timestamp                      | `type.googleapis.com/google.protobuf.Timestamp`   |
	// | Duration                       | `type.googleapis.com/google.protobuf.Duration`    |
	// | Array of bytes                 | `type.googleapis.com/google.protobuf.BytesValue`  |
	// | Any JSON value                 | `type.googleapis.com/google.protobuf.Value`       |
	//
	// When using the HTTP+JSON version of the API the value provided in the `template_parameters` field of the virtual machine
	// must be represented as documented in the (ProtoJSON format document)[https://protobuf.dev/programming-guides/json].
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// Default value for optional parameters.
	Default       *anypb.Any `protobuf:"bytes,6,opt,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VirtualMachineTemplateParameterDefinition) Reset() {
	*x = VirtualMachineTemplateParameterDefinition{}
	mi := &file_fulfillment_v1_virtual_machine_template_type_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualMachineTemplateParameterDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineTemplateParameterDefinition) ProtoMessage() {}

func (x *VirtualMachineTemplateParameterDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_fulfillment_v1_virtual_machine_template_type_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *VirtualMachineTemplateParameterDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualMachineTemplateParameterDefinition) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VirtualMachineTemplateParameterDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VirtualMachineTemplateParameterDefinition) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *VirtualMachineTemplateParameterDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VirtualMachineTemplateParameterDefinition) GetDefault() *anypb.Any {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *VirtualMachineTemplateParameterDefinition) SetName(v string) {
	x.Name = v
}

func (x *VirtualMachineTemplateParameterDefinition) SetTitle(v string) {
	x.Title = v
}

func (x *VirtualMachineTemplateParameterDefinition) SetDescription(v string) {
	x.Description = v
}

func (x *VirtualMachineTemplateParameterDefinition) SetRequired(v bool) {
	x.Required = v
}

func (x *VirtualMachineTemplateParameterDefinition) SetType(v string) {
	x.Type = v
}

func (x *VirtualMachineTemplateParameterDefinition) SetDefault(v *anypb.Any) {
	x.Default = v
}

func (x *VirtualMachineTemplateParameterDefinition) HasDefault() bool {
	if x == nil {
		return false
	}
	return x.Default != nil
}

func (x *VirtualMachineTemplateParameterDefinition) ClearDefault() {
	x.Default = nil
}

type VirtualMachineTemplateParameterDefinition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Name of the parameter.
	//
	// This is the name that should be used in the `template_parameters` field of the virtual machine to assign a value to the
	// parameter.
	Name string
	// Human friendly short description of the parameter, only a few words, suitable for displaying in one single line on
	// a UI or CLI.
	Title string
	// Human friendly description of the parameter, using Markdown format.
	Description string
	// Indicates if this parameter is required or optional.
	//
	// Values for required parameters must be included when creating the virtual machine, otherwise it will be rejected.
	//
	// Note that there may be other dependencies between parameters which may cause a virtual machine to be rejected. For example,
	// the allowed values of a parameter may depend on the value of another parameter. That kind of information will be in
	// the `description` field.
	Required bool
	// Type of the parameter.
	//
	// The possible values are the same as those used by the `type_url` field of the `Any` type:
	//
	// | Type                           | Value                                             |
	// |--------------------------------|---------------------------------------------------|
	// | Boolean                        | `type.googleapis.com/google.protobuf.BoolValue`   |
	// | Integer number, 32 bits        | `type.googleapis.com/google.protobuf.Int32Value`  |
	// | Integer number, 64 bits        | `type.googleapis.com/google.protobuf.Int64Value`  |
	// | Floating point number, 32 bits | `type.googleapis.com/google.protobuf.FloatValue`  |
	// | Floating point number, 64 bits | `type.googleapis.com/google.protobuf.DoubleValue` |
	// | String                         | `type.googleapis.com/google.protobuf.StringValue` |
	// | Timestamp                      | `type.googleapis.com/google.protobuf.Timestamp`   |
	// | Duration                       | `type.googleapis.com/google.protobuf.Duration`    |
	// | Array of bytes                 | `type.googleapis.com/google.protobuf.BytesValue`  |
	// | Any JSON value                 | `type.googleapis.com/google.protobuf.Value`       |
	//
	// When using the HTTP+JSON version of the API the value provided in the `template_parameters` field of the virtual machine
	// must be represented as documented in the (ProtoJSON format document)[https://protobuf.dev/programming-guides/json].
	Type string
	// Default value for optional parameters.
	Default *anypb.Any
}

func (b0 VirtualMachineTemplateParameterDefinition_builder) Build() *VirtualMachineTemplateParameterDefinition {
	m0 := &VirtualMachineTemplateParameterDefinition{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Title = b.Title
	x.Description = b.Description
	x.Required = b.Required
	x.Type = b.Type
	x.Default = b.Default
	return m0
}

var File_fulfillment_v1_virtual_machine_template_type_proto protoreflect.FileDescriptor

var file_fulfillment_v1_virtual_machine_template_type_proto_rawDesc = string([]byte{
	0x0a, 0x32, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec,
	0x01, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd7, 0x01,
	0x0a, 0x29, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0xde, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x1f,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e,
	0x6e, 0x61, 0x62, 0x6f, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6b, 0x69, 0x74, 0x2d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x3b, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x46, 0x58, 0x58, 0xaa, 0x02, 0x0e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x46, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x46, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var file_fulfillment_v1_virtual_machine_template_type_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_fulfillment_v1_virtual_machine_template_type_proto_goTypes = []any{
	(*VirtualMachineTemplate)(nil),                    // 0: fulfillment.v1.VirtualMachineTemplate
	(*VirtualMachineTemplateParameterDefinition)(nil), // 1: fulfillment.v1.VirtualMachineTemplateParameterDefinition
	(*v1.Metadata)(nil),                               // 2: shared.v1.Metadata
	(*anypb.Any)(nil),                                 // 3: google.protobuf.Any
}
var file_fulfillment_v1_virtual_machine_template_type_proto_depIdxs = []int32{
	2, // 0: fulfillment.v1.VirtualMachineTemplate.metadata:type_name -> shared.v1.Metadata
	1, // 1: fulfillment.v1.VirtualMachineTemplate.parameters:type_name -> fulfillment.v1.VirtualMachineTemplateParameterDefinition
	3, // 2: fulfillment.v1.VirtualMachineTemplateParameterDefinition.default:type_name -> google.protobuf.Any
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_fulfillment_v1_virtual_machine_template_type_proto_init() }
func file_fulfillment_v1_virtual_machine_template_type_proto_init() {
	if File_fulfillment_v1_virtual_machine_template_type_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fulfillment_v1_virtual_machine_template_type_proto_rawDesc), len(file_fulfillment_v1_virtual_machine_template_type_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fulfillment_v1_virtual_machine_template_type_proto_goTypes,
		DependencyIndexes: file_fulfillment_v1_virtual_machine_template_type_proto_depIdxs,
		MessageInfos:      file_fulfillment_v1_virtual_machine_template_type_proto_msgTypes,
	}.Build()
	File_fulfillment_v1_virtual_machine_template_type_proto = out.File
	file_fulfillment_v1_virtual_machine_template_type_proto_goTypes = nil
	file_fulfillment_v1_virtual_machine_template_type_proto_depIdxs = nil
}
